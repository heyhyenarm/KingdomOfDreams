using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;
using System;
using Unity.VisualScripting;
using System.IO;

public class UISetting : MonoBehaviour
{
    public Button dim;
    public Button btnClose;
    public ButtonONOFF uiButtonOnOff;
    public Button btnDiscord;
    public Button btnTMI;
    public Slider soundSlider;
    public Slider soundOtherSlider;

    public System.Action onClickVibration;

    public float musicVolume = 1;
    public float otherVolume = 1;
    public int vibration = 1;
    public string SoundVolume = "SoundVolume";
    public string OtherVolume = "OtherVolume";
    public string VibrationOnOff = "VibrationOnOff";

    private void Awake()
    {
        this.musicVolume = PlayerPrefs.GetFloat(SoundVolume);
        this.otherVolume = PlayerPrefs.GetFloat(OtherVolume);
        this.soundSlider.value = this.musicVolume;
        this.soundOtherSlider.value = this.otherVolume;
        SoundManager.SetVolumeMusic(this.musicVolume);
        SoundManager.SetVolumeSFX(this.otherVolume);
        this.vibration = PlayerPrefs.GetInt(VibrationOnOff);
        if (this.vibration == 1)
        {
            this.uiButtonOnOff.BtnOn();
            this.uiButtonOnOff.isOn = true;
        }
        else
        {
            this.uiButtonOnOff.BtnOff();
            this.uiButtonOnOff.isOn = false;
        }
    }
    void Start()
    {
        this.dim.onClick.AddListener(() =>
        {
            Debug.Log("dim clicked");
            this.gameObject.SetActive(false);
        });
        this.btnClose.onClick.AddListener(() =>
        {
            Debug.Log("btnClose clicked");
            this.gameObject.SetActive(false);
        });
        this.uiButtonOnOff.btnONOFF.onClick.AddListener(() =>
        {
            Debug.Log("btnVibration clicked");
            if (this.uiButtonOnOff.isOn)
            {
                this.uiButtonOnOff.BtnOff();
                this.uiButtonOnOff.isOn = false;
                this.vibration = -1;
                PlayerPrefs.SetInt(this.VibrationOnOff, this.vibration);
            }
            else
            {
                this.uiButtonOnOff.BtnOn();
                this.uiButtonOnOff.isOn = true;
                this.vibration = 1;
                PlayerPrefs.SetInt(this.VibrationOnOff, this.vibration);
                Handheld.Vibrate();
            }
        });
        //클라우드 저장 
        this.btnDiscord.onClick.AddListener(() =>
        {
            Application.OpenURL("https://discord.gg/eVYC4MQDRe");
        });

        //클라우드 불러오기  
        this.btnTMI.onClick.AddListener(() =>
        {
            //this.tmiGo.SetActive(true);
        });

        this.soundSlider.onValueChanged.AddListener(OnSliderValueChanged);
        this.soundOtherSlider.onValueChanged.AddListener(OnSliderOTHERValueChanged);
    }

    private void OnSliderValueChanged(float value)
    {
        SoundManager.SetVolumeMusic(value);
        this.musicVolume = value;
        Debug.LogFormat("volume : {0}", value);
        PlayerPrefs.SetFloat(this.SoundVolume, value);
        EventDispatcher.instance.SendEvent<float>((int)LHMEventType.eEventType.CHANGE_MUSIC_VOLUME, value);
    }
    private void OnSliderOTHERValueChanged(float value)
    {
        SoundManager.SetVolumeSFX(value);
        this.otherVolume = value;
        PlayerPrefs.SetFloat(this.OtherVolume, value);
        Debug.LogFormat("volume : {0}", value);
        EventDispatcher.instance.SendEvent<float>((int)LHMEventType.eEventType.CHANGE_OTHERS_VOLUME, value);
    }

}
